@model RegistroJATICS.Models.RegisterViewModel
@{
    ViewBag.Title = "Registro";
    string defDescripcion = ViewBag.defDescripcion;
    int CantidadParticipantes = ViewBag.CantidadParticipantes;
    int cantRegistrados = ViewBag.cantRegistrados;

    string defDescripcion2 = ViewBag.defDescripcion2;
    int CantidadParticipantes2 = ViewBag.CantidadParticipantes2;
    int cantRegistrados2 = ViewBag.cantRegistrados2;

    string btnDisabled = (cantRegistrados >= CantidadParticipantes || cantRegistrados2 >= CantidadParticipantes2) ? "disabled" : "";
    string displayAlert = string.IsNullOrEmpty(btnDisabled) ? "none" : "inline";
}

<h2>@ViewBag.Title.</h2>
<h4>Crear una Nueva Cuenta.</h4>
<hr />
<div class="alert alert-danger" role="alert">El <strong>Nombre de Usuario</strong> será el usuario utilizado para tu sesión<br />El <strong>Nombre Completo</strong> será el que aparecerá en tu certificado</div>
<div class="alert alert-info">Introduce un <strong>password</strong> fácil de recordar, solamente se pide para indetificarte dentro del sistema de registro.</div>
<div class="row">
    @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal col-md-6", role = "form" }))
    {
        @Html.AntiForgeryToken()
        
        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(m => m.UserName, new { @class = "col-md-3 control-label" })
            <div class="col-md-9">
                @Html.TextBoxFor(m => m.UserName, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.NombreAsistente, new { @class = "col-md-3 control-label" })
            <div class="col-md-9">
                @Html.TextBoxFor(m => m.NombreAsistente, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Email, new { @class = "col-md-3 control-label" })
            <div class="col-md-9">
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model, "Taller 28-Feb", htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DropDownListFor(model => model.ID_Taller, (SelectList)ViewBag.Taller, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ID_Taller, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model, "Taller 01-Mar", htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DropDownListFor(model => model.ID_Taller2, (SelectList)ViewBag.Taller2, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ID_Taller2, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Nombre_Institucion, "Institucion", htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DropDownListFor(model => model.Nombre_Institucion, (SelectList)ViewBag.Institucion, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Nombre_Institucion, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Password, new { @class = "col-md-3 control-label" })
            <div class="col-md-9">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                <span class="alert-info">Mínimo 4 caracteres.</span>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-3 control-label" })
            <div class="col-md-9">
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            </div>
        </div>
        <!-- Modal -->
        <div class="modal fade" id="myModal" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Confirmar registro</h4>
                    </div>
                    <div class="modal-body">
                        <p>Tu nombre completo quedará registrado en las listas de asistencia y
                        constancias de la siguiente manera:</p>
                        <strong id="confirmaNombreCompleto"></strong>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-primary" value="Confirmar" />
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
                    </div>
                </div>

            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button id="btnRegistrar"
                        type="button" class="btn btn-default" 
                        data-toggle="modal" 
                        data-target="#myModal"
                        @btnDisabled
                        >Registrar</button>
                <span id="msgCupoMaximo" style="display:@displayAlert" class="alert-danger">Agotado, selecciona 2 talleres con cupo</span>
            </div>
        </div>
    }
    <div class="col-md-3">
        <div class="panel panel-info">
            <div class="panel-heading">Descripción de Taller del Feb-28</div>
            <div class="panel-body">
                <div id="descripcionTaller">
                    <p id="defDescripcion">
                        @(String.IsNullOrEmpty(defDescripcion) ? "No hay descripción disponible" : defDescripcion)
                    </p>
                    <p><strong>Cupo Máximo: </strong><span id="CantidadParticipantes1">@CantidadParticipantes</span></p>
                    <p><strong>Registrados: </strong><span id="cantRegistrados1">@cantRegistrados</span></p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="panel panel-info">
            <div class="panel-heading">Descripción de Taller del Mar-01</div>
            <div class="panel-body">
                <div id="descripcionTaller2">
                    <p id="defDescripcion2">
                        @(String.IsNullOrEmpty(defDescripcion2) ? "No hay descripción disponible" : defDescripcion2)
                    </p>
                    <p><strong>Cupo Máximo: </strong><span id="CantidadParticipantes2">@CantidadParticipantes2</span></p>
                    <p><strong>Registrados: </strong><span id="cantRegistrados2">@cantRegistrados2</span></p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var CantidadParticipantes = @CantidadParticipantes;
        var CantidadParticipantes = @CantidadParticipantes;
        var cantRegistrados = @cantRegistrados;
        var cantRegistrados2 = @cantRegistrados2;
        $("#ID_Taller").change(function () {
            tallerID = $(this).val();
            $.ajax({
                url: '/Tallers/getDescripcion',
                type: 'get',
                data: { id: tallerID },
                dataType: 'JSON',
                success: function (result, status, xhr) {
                    descripcion = result.descripcion == null ? "No hay descripción disponible"
                        : result.descripcion;

                    CantidadParticipantes = result.CantidadParticipantes;
                    cantRegistrados = result.cantRegistrados;
                    
                    setEnableDisableRegistro();

                    $("#descripcionTaller").slideUp(500).slideDown(500);
                    $("#descripcionTaller>p").fadeOut(500).fadeIn(500);
                    setTimeout(function () {
                        $("#defDescripcion").html(descripcion);
                        $("#CantidadParticipantes1").html(CantidadParticipantes);
                        $("#cantRegistrados1").html(cantRegistrados);
                    }, 500);
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        });
        $("#ID_Taller2").change(function () {
            tallerID = $(this).val();
            $.ajax({
                url: '/Taller2/getDescripcion',
                type: 'get',
                data: { id: tallerID },
                dataType: 'JSON',
                success: function (result, status, xhr) {
                    descripcion = result.descripcion == null ? "No hay descripción disponible"
                        : result.descripcion;

                    CantidadParticipantes2 = result.CantidadParticipantes;
                    cantRegistrados2 = result.cantRegistrados;

                    setEnableDisableRegistro();


                    $("#descripcionTaller2").slideUp(500).slideDown(500);
                    $("#descripcionTaller2>p").fadeOut(500).fadeIn(500);
                    setTimeout(function () {
                        $("#defDescripcion2").html(descripcion);
                        $("#CantidadParticipantes2").html(CantidadParticipantes2);
                        $("#cantRegistrados2").html(cantRegistrados2);
                    }, 500);
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        });
        $("input#NombreAsistente").keyup(function () {
            $("#confirmaNombreCompleto").html($(this).val());
        });

        function setEnableDisableRegistro(){
            var canRegister= cantRegistrados < CantidadParticipantes && cantRegistrados2 < CantidadParticipantes2;
            $("#btnRegistrar").prop("disabled", !canRegister)
            if (!canRegister) {
                $("#msgCupoMaximo").fadeIn();
            } else {
                $("#msgCupoMaximo").fadeOut();
            }
        }
    </script>
}
